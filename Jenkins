pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1' // Set your AWS region
    }
    parameters {
        string(name: 'IAM_ROLE_NAME', description: 'Name of the IAM role to delete', defaultValue: '')
        string(name: 'AWS_ACCOUNT_ID', description: 'AWS Account ID where the role exists', defaultValue: '')
        string(name: 'ACCESS_KEY', defaultValue:'', description:'Enter the access key')
        password(name: 'SECRET_KEY', description: 'Enter the secret key of the role')
        password(name: 'SESSION_TOKEN', description: 'Enter the Session token of the role')
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!params.IAM_ROLE_NAME || !params.AWS_ACCOUNT_ID) {
                        error "IAM_ROLE_NAME and AWS_ACCOUNT_ID parameters are required."
                    }
                }
            }
        }

        stage('Assume target account role') {
            steps {
                script {
                    
                    def jenkinsAccount = execSH("aws sts get-caller-identity")
                    print(jenkinsAccount)

                        '''
                        env.AWS_ACCESS_KEY_ID = params.ACCESS_KEY
                        env.AWS_SECRET_ACCESS_KEY = params.SECRET_ACCESS_KEY
                        env.AWS_SESSION_TOKEN = params.SESSION_TOKEN
                        '''

                        
                        '''
                        println "assuming role : RRCC_AWS_EC2OPSL3 on account ${jenkinsAccount.Account}"
                        newRole = execSH("aws sts assume-role --role-arn arn:aws:iam::866919043554:role/RRCC_AWS_EC2OPSL3 --role-session-name target-assumed-sts --duration-second=3000")
                        env.AWS_ACCESS_KEY_ID = newRole.Credentials.AccessKeyId
                        env.AWS_SECRET_ACCESS_KEY = newRole.Credentials.SecretAccessKey
                        env.AWS_SESSION_TOKEN = newRole.Credentials.SessionToken
                        '''
                        '''
                        println "assuming role : RRSB_AWS_AUTO_ADM on account 866919043554"
                        newRole = execSH("aws sts assume-role --role-arn arn:aws:iam::866919043554:role/RRSB_AWS_AUTO_ADM --role-session-name target-assumed-sts --duration-second=3000")
                        env.AWS_ACCESS_KEY_ID = newRole.Credentials.AccessKeyId
                        env.AWS_SECRET_ACCESS_KEY = newRole.Credentials.SecretAccessKey
                        env.AWS_SESSION_TOKEN = newRole.Credentials.SessionToken
                        '''
                        
                    }           
            }  
           }
        stage('Detach Policies and Delete IAM Role') {
            steps {
                script {
                    echo "Starting process to delete IAM role: ${params.IAM_ROLE_NAME}"
                    
                    // Detach managed policies
                    echo "Detaching managed policies..."
                    def attachedPolicies = sh(
                        script: """
                            aws iam list-attached-role-policies --role-name ${params.IAM_ROLE_NAME} \
                            --query 'AttachedPolicies[].PolicyArn' --output text
                        """,
                        returnStdout: true
                    ).trim()

                    attachedPolicies.split().each { policyArn ->
                        sh """
                            aws iam detach-role-policy --role-name ${params.IAM_ROLE_NAME} --policy-arn ${policyArn}
                        """
                        echo "Detached policy: ${policyArn}"
                    }

                    // Delete inline policies
                    echo "Deleting inline policies..."
                    def inlinePolicies = sh(
                        script: """
                            aws iam list-role-policies --role-name ${params.IAM_ROLE_NAME} \
                            --query 'PolicyNames' --output text
                        """,
                        returnStdout: true
                    ).trim()

                    inlinePolicies.split().each { policyName ->
                        sh """
                            aws iam delete-role-policy --role-name ${params.IAM_ROLE_NAME} --policy-name ${policyName}
                        """
                        echo "Deleted inline policy: ${policyName}"
                    }

                    // Finally, delete the IAM role
                    echo "Deleting IAM role: ${params.IAM_ROLE_NAME}"
                    sh """
                        aws iam delete-role --role-name ${params.IAM_ROLE_NAME}
                    """
                    echo "IAM role '${params.IAM_ROLE_NAME}' deleted successfully."
                }
            }
        }
    }
    post {
        success {
            echo "Successfully deleted IAM role and policies for: ${params.IAM_ROLE_NAME}"
        }
        failure {
            echo "Failed to delete IAM role or its policies: ${params.IAM_ROLE_NAME}"
        }
    }
}
